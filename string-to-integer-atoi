

class Solution {
    int getSign(const char*& pstr){
        
        if(*pstr == '-'){
            
            pstr ++;
            return -1;
        }else if(*pstr == '+'){
            
            pstr ++;
            return 1;
        }
        
        return 1;
    }
    
    void skipSpace(const char*& pstr){
            while(*pstr == ' ' || *pstr == '\t'){
                pstr++;
            }
    }
    
    void skipZero(const char*& pstr){
            while(*pstr == '0'){
                pstr++;
            }
    }
    
    bool willOverflow(int v, int adding, int sign){
        if(sign > 0){
            return (INT_MAX/10 < v) || (INT_MAX/10 == v && INT_MAX%10 < adding);
        }else{
            return (INT_MIN/10 > v ) || (INT_MIN/10 == v && INT_MIN%10 > adding);
        }
    }
    
    bool charValid(const char*& pstr){
        return *pstr >= '0' && *pstr <= '9';   
    }
    
public:
    int myAtoi(string str) {
        const char *pstr = str.c_str();
        int val=0;
        int sign=1;
        skipSpace(pstr);
        sign = getSign(pstr);
        skipZero(pstr);
        
        
        while(*pstr){
            if(!charValid(pstr))return val;
            int adding = (*pstr) -'0';
            adding *= sign;
            if(willOverflow(val,adding,sign)){
                return sign>0?INT_MAX:INT_MIN;
            }
            val = val*10 + adding;
            pstr++;
        }
        
        return val;
    }
};




